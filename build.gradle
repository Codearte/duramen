apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'uploadAuth'
apply plugin: 'me.champeau.gradle.jmh'

sourceCompatibility = 1.7
targetCompatibility = 1.7

ext.isReleaseVersion = !project.version.endsWith("SNAPSHOT")

buildscript {
	repositories {
		mavenCentral()
		mavenLocal()
		jcenter()
	}
	dependencies {
		classpath 'org.hibernate.build.gradle:gradle-upload-auth-plugin:1.1.1'
		classpath 'me.champeau.gradle:jmh-gradle-plugin:0.1'
	}
}

repositories {
	mavenCentral()
}

ext {
	springVersion = "[3.2.2.RELEASE,)"
	guavaVersion = "[11.0,)"
	slf4jVersion = "[1.6.0,)"
	h2Version = "[1.2.120,)"
	jacksonVersion = "[2.1.0,)"
}

dependencies {
	compile "org.slf4j:slf4j-api:${slf4jVersion}"
	compile "org.springframework:spring-context:${springVersion}"
	compile "org.springframework:spring-jdbc:${springVersion}"
	compile "com.google.guava:guava:${guavaVersion}"
	compile "com.h2database:h2:${h2Version}"
	compile "com.esotericsoftware.kryo:kryo:2.24.0"
	compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
	compile "net.openhft:collections:3.0.3"
	testCompile "org.springframework:spring-test:${springVersion}"
	testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
	testCompile "org.spockframework:spock-spring:0.7-groovy-2.0"
	testCompile "org.kubek2k:springockito-annotations:1.0.9"
	testCompile "org.mockito:mockito-all:1.9.5"
	testCompile "ch.qos.logback:logback-classic:1.1.1"
	testCompile "org.slf4j:jcl-over-slf4j:${slf4jVersion}"
	testCompile "com.jayway.awaitility:awaitility-groovy:1.6.1"

	compile 'org.openjdk.jmh:jmh-core:0.9'
	compile 'org.openjdk.jmh:jmh-generator-annprocess:0.9'
	jmh project.configurations.compile
}

jmh {
	warmupIterations = 1
	iterations = 2
	fork = 1
	forceGC = true
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
task sourceJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}
artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

jar {
	manifest {
		attributes(
				"Application-Name": "Duramen",
				"Implementation-Title": "Duramen",
				"Implementation-Version": version,
				"Implementation-Vendor": 'Codearte',
				'Built-Date': new Date(),
				'Built-JDK': System.properties['java.version'],
				'Built-Gradle': gradle.gradleVersion,
				"Built-By": System.properties['user.name'])
	}
}

if (isReleaseVersion) {
	//activate signing only for release versions (it is not needed for 'gradle install')
	apply plugin: 'signing'

	signing {
		sign configurations.archives
	}

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.allTasks.any { it instanceof org.gradle.plugins.signing.Sign }) {
			if (!project.hasProperty("signing.keyId") || !project.hasProperty("signing.secretKeyRingFile")) {
				throw new GradleException("signing.keyId and signing.secretKeyRingFile has to be configured (e.g. in ~/.gradle/gradle.properties)")
			}
			Console console = System.console()
			if (console && !project.hasProperty("signing.password")) {
				def keyPassword = console.readPassword("\nEnter a private key password: ")
				ext."signing.password" = keyPassword
			} else if (!project.hasProperty("signing.password")) {
				throw new GradleException("No signing.password configured (e.g. in ~/.gradle/gradle.properties). Also unable to get console. Make sure to not running a signing task in a daemon mode (e.g. use --no-daemon).")
			}
		}
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			name = 'Sonatype OSS'

			beforeDeployment {
				if (isReleaseVersion) {
					signing.signPom it
				}
			}

			pom.project {
				name 'Duramen'
				description 'Duramen - Java persistent event bus'
				packaging 'jar'
				url 'http://codearte.github.io/duramen'
				licenses {
					license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0'
						distribution 'repo'
					}
				}
				developers {
					developer {
						id 'jkubrynski'
						name 'Jakub Kubry≈Ñski'
						email 'jkubrynski ATT gmail DOTT com'
						roles {
							role 'despot'
							role 'developer'
						}
					}
				}
				scm {
					connection 'scm:git:git@github.com:Codearte/duramen.git'
					developerConnection 'scm:git:git@github.com:Codearte/duramen.git'
					url 'https://github.com/Codearte/duramen'
				}

			}
		}
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '1.12'
}