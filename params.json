{"name":"Duramen","tagline":"Java Persistent Event Bus","body":"Duramen\r\n=======\r\n\r\nPersistent event bus implementation for Java. Easily integrates with Spring Framework. By default uses file backed embedded H2 database. Guarantees that event will be dispatched.\r\n\r\n##Usage:\r\n\r\n1. Add duramen dependency: ```eu.codearte.duramen:duramen:0.5.0```\r\n2. Use ```@EnableDuramen``` annotation to import Duramen into your project:\r\n ```java\r\n @Configuration\r\n @ComponentScan\r\n @EnableDuramen\r\n public class FooConfiguration {\r\n \r\n }\r\n```\r\n3. Implement custom event class:\r\n ```java\r\n public class FooEvent extends Event {\r\n    private String message;\r\n \r\n    // getters and setters\r\n }\r\n```\r\n4. To produce events you have to implement producer component:\r\n ```java\r\n import eu.codearte.duramen.EventBus;\r\n \r\n @Component\r\n public class FooEventProducer {\r\n \r\n    private final EventBus eventBus;\r\n   \r\n    @Autowired\r\n    public FooEventProducer(EventBus eventBus) {\r\n\t    this.eventBus = eventBus;\r\n    }\r\n\r\n    /** \r\n     * This method will be called from your production code\r\n     */\r\n    public void produce() {\r\n\t    FooEvent event = new FooEvent();\r\n\t    event.setMessage(\"Test message\");\r\n\t    eventBus.publish(event);\r\n \t  }\r\n }\r\n```\r\n5. To receive events you have to implement consumer. Generic type in ```EventHandler``` will decide which events will be processed in particular consumer:\r\n ```java\r\n import eu.codearte.duramen.handler.EventHandler;\r\n\r\n @Component\r\n public class FooEventConsumer implements EventHandler<FooEvent> {\r\n\r\n \t @Override\r\n\t public void onEvent(FooEvent event) {\r\n\t   System.out.println(\"Received message: \" + event.getMessage());\r\n\t }\r\n\r\n }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}