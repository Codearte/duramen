//Release related configuration for Gradle based project - a project agnostic part
//
//Note: this code was designed to be used with a project specific part (should be earlier applied from build.gradle)
// which defines `ext.mavenPomClosure` passed as a parameter to org.gradle.api.artifacts.maven.MavenPom.project(Closure pom)
// and `ext.vendor` used in JAR manifest for "Implementation-Vendor".

ext.isReleaseVersion = !project.version.endsWith("SNAPSHOT")

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourceJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives jar
	archives sourceJar
	archives javadocJar
}

jar {
	manifest {
		attributes(
				"Application-Name": name?.capitalize(),
				"Implementation-Title": name?.capitalize(),
				"Implementation-Version": version,
				"Implementation-Vendor": vendor,
				'Built-Date': new Date(),
				'Built-JDK': System.properties['java.version'],
				'Built-Gradle': gradle.gradleVersion,
				"Built-By": System.properties['user.name'])
	}
}

if (isReleaseVersion) {
	//activate signing only for release versions (it is not needed for 'gradle install')
	apply plugin: 'signing'

	signing {
		sign configurations.archives
	}

	gradle.taskGraph.whenReady { taskGraph ->
		if (taskGraph.allTasks.any { it instanceof org.gradle.plugins.signing.Sign }) {
			if (!project.hasProperty("signing.keyId") || !project.hasProperty("signing.secretKeyRingFile")) {
				throw new GradleException("signing.keyId and signing.secretKeyRingFile has to be configured (e.g. in ~/.gradle/gradle.properties)")
			}
			Console console = System.console()
			if (console && !project.hasProperty("signing.password")) {
				def keyPassword = console.readPassword("\nEnter a private key password: ")
				ext."signing.password" = keyPassword
			} else if (!project.hasProperty("signing.password")) {
				throw new GradleException("No signing.password configured (e.g. in ~/.gradle/gradle.properties). Also unable to get console. Make sure to not running a signing task in a daemon mode (e.g. use --no-daemon).")
			}
		}
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			repository(id: 'sonatype-nexus-staging', url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			snapshotRepository(id: 'sonatype-nexus-snapshots', url: 'https://oss.sonatype.org/content/repositories/snapshots') {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}
			name = 'Sonatype OSS'

			beforeDeployment {
				if (isReleaseVersion) {
					signing.signPom it
				}
			}

			pom.project mavenPomClosure
		}
	}
}
